test_0wrapper_implementation_0000 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={}] ... 

---------------------------------
| Test case  |
---------------------------------

Should not fail...


---------------------------------
| Comparing synch and Newt: |
---------------------------------
ok
test_0wrapper_implementation_0001 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'lensing': 'yes'}] ... 

---------------------------------
| Test case lensing=yes |
---------------------------------
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0002 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'non linear': 'halofit'}] ... 

---------------------------------
| Test case nonlinear=halofit |
---------------------------------
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0003 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'non linear': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case nonlinear=halofit_lensing=yes |
---------------------------------
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0004 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
output = mPk
P_k_max_1/Mpc = 10

Should not fail...
--> testing pk function
--> testing absence of any Cl


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of Pkok
test_0wrapper_implementation_0005 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'mPk', 'P_k_max_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0006 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'mPk', 'P_k_max_1/Mpc': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
--> testing pk function
--> testing absence of any Cl


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of Pkok
test_0wrapper_implementation_0007 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'mPk', 'P_k_max_1/Mpc...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0008 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'tCl'}] ... 

---------------------------------
| Test case output=tCl |
---------------------------------
output = tCl

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0009 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case output=tCl_lensing=yes |
---------------------------------
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0010 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case output=tCl_nonlinear=halofit |
---------------------------------
output = tCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0011 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'tCl', 'non linear': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0012 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case output=tClpCllCl |
---------------------------------
output = tCl pCl lCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0013 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case output=tClpCllCl_lensing=yes |
---------------------------------
output = tCl pCl lCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0014 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'tCl pCl lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case output=tClpCllCl_nonlinear=halofit |
---------------------------------
output = tCl pCl lCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0015 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'tCl pCl lCl', 'non l...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0016 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'mPk tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0017 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'mPk tCl lCl', 'P_k_max_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0018 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'mPk tCl lCl', 'P_k_m...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0019 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'mPk tCl lCl', 'P_k_m...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0020 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'nCl sCl'}] ... 

---------------------------------
| Test case output=nClsCl |
---------------------------------
output = nCl sCl

Should not fail...
--> testing absence of any Cl
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0021 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case output=nClsCl_lensing=yes |
---------------------------------
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0022 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'nCl sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case output=nClsCl_nonlinear=halofit |
---------------------------------
output = nCl sCl
non linear = halofit

Should not fail...
--> testing absence of any Cl
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0023 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'nCl sCl', 'non linear': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0024 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case output=tClpCllClnClsCl |
---------------------------------
output = tCl pCl lCl nCl sCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0025 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'tCl pCl lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case output=tClpCllClnClsCl_lensing=yes |
---------------------------------
output = tCl pCl lCl nCl sCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0026 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'tCl pCl lCl nCl sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
output = tCl pCl lCl nCl sCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0027 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'tCl pCl lCl nCl sCl'...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0028 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact'}] ... 

---------------------------------
| Test case tensormethod=exact |
---------------------------------
tensor method = exact

Should fail...
ok
test_0wrapper_implementation_0029 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=exact_lensing=yes |
---------------------------------
tensor method = exact
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0030 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case tensormethod=exact_nonlinear=halofit |
---------------------------------
tensor method = exact
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0031 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'non ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=exact_nonlinear=halofit_lensing=yes |
---------------------------------
tensor method = exact
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0032 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'output': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case tensormethod=exact_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0033 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'outp...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0034 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'outp...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0035 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'outp...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0036 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'output': 'tCl'}] ... 

---------------------------------
| Test case tensormethod=exact_output=tCl |
---------------------------------
tensor method = exact
output = tCl

Should fail...
ok
test_0wrapper_implementation_0037 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'output': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=exact_output=tCl_lensing=yes |
---------------------------------
tensor method = exact
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0038 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'outp... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case tensormethod=exact_output=tCl_nonlinear=halofit |
---------------------------------
tensor method = exact
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0039 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'outp...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=exact_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
tensor method = exact
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0040 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case tensormethod=exact_output=tClpCllCl |
---------------------------------
tensor method = exact
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0041 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'outp...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=exact_output=tClpCllCl_lensing=yes |
---------------------------------
tensor method = exact
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0042 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'outp...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case tensormethod=exact_output=tClpCllCl_nonlinear=halofit |
---------------------------------
tensor method = exact
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0043 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'outp...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=exact_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
tensor method = exact
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0044 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'outp...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0045 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'outp...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0046 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'outp...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0047 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'outp...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0048 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case tensormethod=exact_output=nClsCl |
---------------------------------
tensor method = exact
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0049 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'outp...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=exact_output=nClsCl_lensing=yes |
---------------------------------
tensor method = exact
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0050 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'outp...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case tensormethod=exact_output=nClsCl_nonlinear=halofit |
---------------------------------
tensor method = exact
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0051 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'outp...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=exact_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
tensor method = exact
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0052 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case tensormethod=exact_output=tClpCllClnClsCl |
---------------------------------
tensor method = exact
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0053 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'outp... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=exact_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
tensor method = exact
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0054 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'outp...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0055 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'exact', 'outp...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0056 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons'}] ... 

---------------------------------
| Test case tensormethod=photons |
---------------------------------
tensor method = photons

Should fail...
ok
test_0wrapper_implementation_0057 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=photons_lensing=yes |
---------------------------------
tensor method = photons
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0058 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case tensormethod=photons_nonlinear=halofit |
---------------------------------
tensor method = photons
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0059 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'no...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=photons_nonlinear=halofit_lensing=yes |
---------------------------------
tensor method = photons
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0060 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case tensormethod=photons_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0061 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0062 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0063 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0064 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'output': 'tCl'}] ... 

---------------------------------
| Test case tensormethod=photons_output=tCl |
---------------------------------
tensor method = photons
output = tCl

Should fail...
ok
test_0wrapper_implementation_0065 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'output': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=photons_output=tCl_lensing=yes |
---------------------------------
tensor method = photons
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0066 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case tensormethod=photons_output=tCl_nonlinear=halofit |
---------------------------------
tensor method = photons
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0067 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=photons_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
tensor method = photons
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0068 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case tensormethod=photons_output=tClpCllCl |
---------------------------------
tensor method = photons
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0069 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=photons_output=tClpCllCl_lensing=yes |
---------------------------------
tensor method = photons
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0070 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case tensormethod=photons_output=tClpCllCl_nonlinear=halofit |
---------------------------------
tensor method = photons
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0071 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=photons_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
tensor method = photons
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0072 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0073 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0074 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0075 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0076 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case tensormethod=photons_output=nClsCl |
---------------------------------
tensor method = photons
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0077 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=photons_output=nClsCl_lensing=yes |
---------------------------------
tensor method = photons
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0078 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case tensormethod=photons_output=nClsCl_nonlinear=halofit |
---------------------------------
tensor method = photons
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0079 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=photons_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
tensor method = photons
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0080 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case tensormethod=photons_output=tClpCllClnClsCl |
---------------------------------
tensor method = photons
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0081 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=photons_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
tensor method = photons
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0082 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0083 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'tensor method': 'photons', 'ou...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0084 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't'}] ... 

---------------------------------
| Test case modes=t |
---------------------------------
modes = t

Should fail...
ok
test_0wrapper_implementation_0085 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_lensing=yes |
---------------------------------
modes = t
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0086 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_nonlinear=halofit |
---------------------------------
modes = t
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0087 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'non linear': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0088 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case modes=t_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
modes = t
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0089 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'mPk', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
modes = t
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0090 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'mPk', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
modes = t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0091 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'mPk', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0092 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'tCl'}] ... 

---------------------------------
| Test case modes=t_output=tCl |
---------------------------------
modes = t
output = tCl

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0093 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_output=tCl_lensing=yes |
---------------------------------
modes = t
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0094 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_output=tCl_nonlinear=halofit |
---------------------------------
modes = t
output = tCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0095 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'tCl', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0096 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case modes=t_output=tClpCllCl |
---------------------------------
modes = t
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0097 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_output=tClpCllCl_lensing=yes |
---------------------------------
modes = t
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0098 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'tCl pCl lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_output=tClpCllCl_nonlinear=halofit |
---------------------------------
modes = t
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0099 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'tCl pC...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0100 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'mPk tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case modes=t_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0101 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'mPk tC...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0102 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'mPk tC...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0103 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'mPk tC...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0104 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case modes=t_output=nClsCl |
---------------------------------
modes = t
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0105 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_output=nClsCl_lensing=yes |
---------------------------------
modes = t
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0106 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'nCl sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_output=nClsCl_nonlinear=halofit |
---------------------------------
modes = t
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0107 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'nCl sC...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0108 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case modes=t_output=tClpCllClnClsCl |
---------------------------------
modes = t
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0109 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'tCl pC... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
modes = t
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0110 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'tCl pC...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
modes = t
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0111 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'output': 'tCl pC...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0112 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': 'exact'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact |
---------------------------------
modes = t
tensor method = exact

Should fail...
ok
test_0wrapper_implementation_0113 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': 'exact', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_lensing=yes |
---------------------------------
modes = t
tensor method = exact
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0114 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...exact', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_nonlinear=halofit |
---------------------------------
modes = t
tensor method = exact
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0115 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
tensor method = exact
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0116 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0117 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0118 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0119 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0120 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': 'exact', 'output': 'tCl'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=tCl |
---------------------------------
modes = t
tensor method = exact
output = tCl

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0121 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=tCl_lensing=yes |
---------------------------------
modes = t
tensor method = exact
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0122 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=tCl_nonlinear=halofit |
---------------------------------
modes = t
tensor method = exact
output = tCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0123 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
tensor method = exact
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0124 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...exact', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=tClpCllCl |
---------------------------------
modes = t
tensor method = exact
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0125 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=tClpCllCl_lensing=yes |
---------------------------------
modes = t
tensor method = exact
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0126 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=tClpCllCl_nonlinear=halofit |
---------------------------------
modes = t
tensor method = exact
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0127 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
tensor method = exact
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0128 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0129 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0130 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0131 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0132 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': 'exact', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=nClsCl |
---------------------------------
modes = t
tensor method = exact
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0133 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=nClsCl_lensing=yes |
---------------------------------
modes = t
tensor method = exact
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0134 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=nClsCl_nonlinear=halofit |
---------------------------------
modes = t
tensor method = exact
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0135 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
tensor method = exact
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0136 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=tClpCllClnClsCl |
---------------------------------
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0137 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0138 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0139 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0140 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': 'photons'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons |
---------------------------------
modes = t
tensor method = photons

Should fail...
ok
test_0wrapper_implementation_0141 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': 'photons', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_lensing=yes |
---------------------------------
modes = t
tensor method = photons
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0142 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...otons', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_nonlinear=halofit |
---------------------------------
modes = t
tensor method = photons
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0143 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
tensor method = photons
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0144 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0145 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0146 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0147 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0148 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': 'photons', 'output': 'tCl'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=tCl |
---------------------------------
modes = t
tensor method = photons
output = tCl

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0149 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=tCl_lensing=yes |
---------------------------------
modes = t
tensor method = photons
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0150 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=tCl_nonlinear=halofit |
---------------------------------
modes = t
tensor method = photons
output = tCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0151 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
tensor method = photons
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0152 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...otons', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=tClpCllCl |
---------------------------------
modes = t
tensor method = photons
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0153 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=tClpCllCl_lensing=yes |
---------------------------------
modes = t
tensor method = photons
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0154 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=tClpCllCl_nonlinear=halofit |
---------------------------------
modes = t
tensor method = photons
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0155 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
tensor method = photons
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0156 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0157 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0158 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0159 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0160 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': 'photons', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=nClsCl |
---------------------------------
modes = t
tensor method = photons
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0161 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=nClsCl_lensing=yes |
---------------------------------
modes = t
tensor method = photons
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0162 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=nClsCl_nonlinear=halofit |
---------------------------------
modes = t
tensor method = photons
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0163 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
tensor method = photons
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0164 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=tClpCllClnClsCl |
---------------------------------
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0165 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0166 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0167 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 't', 'tensor method': ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=t_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0168 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t'}] ... 

---------------------------------
| Test case modes=st |
---------------------------------
modes = s, t

Should fail...
ok
test_0wrapper_implementation_0169 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_lensing=yes |
---------------------------------
modes = s, t
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0170 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_nonlinear=halofit |
---------------------------------
modes = s, t
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0171 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'non linear': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0172 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case modes=st_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
modes = s, t
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0173 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'mPk...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
modes = s, t
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0174 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'mPk...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
modes = s, t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0175 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'mPk...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0176 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'tCl'}] ... 

---------------------------------
| Test case modes=st_output=tCl |
---------------------------------
modes = s, t
output = tCl

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0177 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_output=tCl_lensing=yes |
---------------------------------
modes = s, t
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0178 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_output=tCl_nonlinear=halofit |
---------------------------------
modes = s, t
output = tCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0179 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'tCl...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0180 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case modes=st_output=tClpCllCl |
---------------------------------
modes = s, t
output = tCl pCl lCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0181 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_output=tClpCllCl_lensing=yes |
---------------------------------
modes = s, t
output = tCl pCl lCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0182 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'tCl...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_output=tClpCllCl_nonlinear=halofit |
---------------------------------
modes = s, t
output = tCl pCl lCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0183 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'tCl...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0184 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'mPk tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case modes=st_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0185 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'mPk...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0186 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'mPk...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0187 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'mPk...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0188 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case modes=st_output=nClsCl |
---------------------------------
modes = s, t
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0189 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_output=nClsCl_lensing=yes |
---------------------------------
modes = s, t
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0190 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'nCl sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_output=nClsCl_nonlinear=halofit |
---------------------------------
modes = s, t
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0191 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'nCl...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0192 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case modes=st_output=tClpCllClnClsCl |
---------------------------------
modes = s, t
output = tCl pCl lCl nCl sCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0193 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'tCl... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
modes = s, t
output = tCl pCl lCl nCl sCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0194 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'tCl...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
modes = s, t
output = tCl pCl lCl nCl sCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0195 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'tCl...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0196 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method': 'exact'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact |
---------------------------------
modes = s, t
tensor method = exact

Should fail...
ok
test_0wrapper_implementation_0197 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method': 'exact', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_lensing=yes |
---------------------------------
modes = s, t
tensor method = exact
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0198 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...exact', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_nonlinear=halofit |
---------------------------------
modes = s, t
tensor method = exact
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0199 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
tensor method = exact
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0200 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0201 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0202 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0203 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0204 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method': 'exact', 'output': 'tCl'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=tCl |
---------------------------------
modes = s, t
tensor method = exact
output = tCl

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0205 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=tCl_lensing=yes |
---------------------------------
modes = s, t
tensor method = exact
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0206 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=tCl_nonlinear=halofit |
---------------------------------
modes = s, t
tensor method = exact
output = tCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0207 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
tensor method = exact
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0208 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...exact', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=tClpCllCl |
---------------------------------
modes = s, t
tensor method = exact
output = tCl pCl lCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0209 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=tClpCllCl_lensing=yes |
---------------------------------
modes = s, t
tensor method = exact
output = tCl pCl lCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0210 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=tClpCllCl_nonlinear=halofit |
---------------------------------
modes = s, t
tensor method = exact
output = tCl pCl lCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0211 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
tensor method = exact
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0212 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0213 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0214 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0215 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0216 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method': 'exact', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=nClsCl |
---------------------------------
modes = s, t
tensor method = exact
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0217 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=nClsCl_lensing=yes |
---------------------------------
modes = s, t
tensor method = exact
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0218 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=nClsCl_nonlinear=halofit |
---------------------------------
modes = s, t
tensor method = exact
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0219 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
tensor method = exact
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0220 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=tClpCllClnClsCl |
---------------------------------
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0221 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0222 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0223 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0224 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method': 'photons'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons |
---------------------------------
modes = s, t
tensor method = photons

Should fail...
ok
test_0wrapper_implementation_0225 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method': 'photons', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_lensing=yes |
---------------------------------
modes = s, t
tensor method = photons
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0226 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...otons', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_nonlinear=halofit |
---------------------------------
modes = s, t
tensor method = photons
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0227 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
tensor method = photons
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0228 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0229 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0230 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0231 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0232 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method': 'photons', 'output': 'tCl'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=tCl |
---------------------------------
modes = s, t
tensor method = photons
output = tCl

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0233 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=tCl_lensing=yes |
---------------------------------
modes = s, t
tensor method = photons
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0234 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=tCl_nonlinear=halofit |
---------------------------------
modes = s, t
tensor method = photons
output = tCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0235 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
tensor method = photons
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0236 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...otons', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=tClpCllCl |
---------------------------------
modes = s, t
tensor method = photons
output = tCl pCl lCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0237 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=tClpCllCl_lensing=yes |
---------------------------------
modes = s, t
tensor method = photons
output = tCl pCl lCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0238 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=tClpCllCl_nonlinear=halofit |
---------------------------------
modes = s, t
tensor method = photons
output = tCl pCl lCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0239 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
tensor method = photons
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0240 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0241 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0242 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0243 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0244 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method... 'photons', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=nClsCl |
---------------------------------
modes = s, t
tensor method = photons
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0245 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=nClsCl_lensing=yes |
---------------------------------
modes = s, t
tensor method = photons
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0246 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=nClsCl_nonlinear=halofit |
---------------------------------
modes = s, t
tensor method = photons
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0247 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
tensor method = photons
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0248 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=tClpCllClnClsCl |
---------------------------------
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0249 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0250 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0251 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case modes=st_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0252 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi': -0.5}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5

Should fail...
ok
test_0wrapper_implementation_0253 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi': -0.5, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0254 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi': -0.5, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0255 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0256 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = mPk
P_k_max_1/Mpc = 10

Should not fail...
--> testing pk function
--> testing absence of any Cl


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of Pkok
test_0wrapper_implementation_0257 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0258 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
--> testing pk function
--> testing absence of any Cl


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of Pkok
test_0wrapper_implementation_0259 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0260 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi': -0.5, 'output': 'tCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=tCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = tCl

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0261 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=tCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0262 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=tCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = tCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0263 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0264 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi': -0.5, 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=tClpCllCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = tCl pCl lCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0265 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=tClpCllCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = tCl pCl lCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0266 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=tClpCllCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = tCl pCl lCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0267 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0268 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0269 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0270 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0271 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0272 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi': -0.5, 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=nClsCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = nCl sCl

Should not fail...
--> testing absence of any Cl
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0273 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=nClsCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0274 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=nClsCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = nCl sCl
non linear = halofit

Should not fail...
--> testing absence of any Cl
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0275 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0276 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=tClpCllClnClsCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = tCl pCl lCl nCl sCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0277 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = tCl pCl lCl nCl sCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0278 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = tCl pCl lCl nCl sCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0279 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0280 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi': -0.5, 'tensor method': 'exact'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact

Should fail...
ok
test_0wrapper_implementation_0281 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...hod': 'exact', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0282 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...exact', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0283 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0284 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0285 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0286 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0287 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0288 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...thod': 'exact', 'output': 'tCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=tCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = tCl

Should fail...
ok
test_0wrapper_implementation_0289 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=tCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0290 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=tCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0291 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0292 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...exact', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=tClpCllCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0293 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=tClpCllCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0294 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=tClpCllCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0295 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0296 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0297 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0298 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0299 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0300 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...': 'exact', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=nClsCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0301 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=nClsCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0302 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=nClsCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0303 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0304 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=tClpCllClnClsCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0305 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0306 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0307 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0308 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...0.5, 'tensor method': 'photons'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons

Should fail...
ok
test_0wrapper_implementation_0309 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...d': 'photons', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0310 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...otons', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0311 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0312 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0313 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0314 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0315 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0316 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...od': 'photons', 'output': 'tCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=tCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = tCl

Should fail...
ok
test_0wrapper_implementation_0317 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=tCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0318 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=tCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0319 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0320 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...otons', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=tClpCllCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0321 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=tClpCllCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0322 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=tClpCllCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0323 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0324 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0325 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0326 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0327 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0328 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... 'photons', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=nClsCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0329 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=nClsCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0330 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=nClsCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0331 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0332 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=tClpCllClnClsCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0333 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0334 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0335 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0336 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi': -0.5, 'modes': 't'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t

Should fail...
ok
test_0wrapper_implementation_0337 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... 'modes': 't', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0338 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...': 't', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0339 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0340 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0341 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0342 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0343 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0344 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':..., 'modes': 't', 'output': 'tCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=tCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = tCl

Should fail...
ok
test_0wrapper_implementation_0345 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=tCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0346 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=tCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0347 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0348 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...': 't', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=tClpCllCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0349 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=tClpCllCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0350 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=tClpCllCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0351 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0352 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0353 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0354 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0355 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0356 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...odes': 't', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=nClsCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0357 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=nClsCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0358 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=nClsCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0359 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0360 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=tClpCllClnClsCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0361 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0362 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0363 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0364 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...: 't', 'tensor method': 'exact'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact

Should fail...
ok
test_0wrapper_implementation_0365 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...hod': 'exact', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0366 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...exact', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0367 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0368 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0369 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0370 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0371 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0372 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...thod': 'exact', 'output': 'tCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=tCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = tCl

Should fail...
ok
test_0wrapper_implementation_0373 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=tCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0374 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=tCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0375 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0376 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...exact', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=tClpCllCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0377 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=tClpCllCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0378 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=tClpCllCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0379 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0380 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0381 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0382 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0383 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0384 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...': 'exact', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=nClsCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0385 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=nClsCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0386 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=nClsCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0387 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0388 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=tClpCllClnClsCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0389 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0390 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0391 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0392 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'t', 'tensor method': 'photons'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons

Should fail...
ok
test_0wrapper_implementation_0393 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...d': 'photons', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0394 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...otons', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0395 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0396 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0397 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0398 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0399 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0400 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...od': 'photons', 'output': 'tCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=tCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = tCl

Should fail...
ok
test_0wrapper_implementation_0401 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=tCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0402 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=tCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0403 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0404 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...otons', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=tClpCllCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0405 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=tClpCllCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0406 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=tClpCllCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0407 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0408 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0409 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0410 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0411 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0412 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... 'photons', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=nClsCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0413 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=nClsCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0414 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=nClsCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0415 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0416 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=tClpCllClnClsCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0417 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0418 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0419 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=t_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0420 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi': -0.5, 'modes': 's, t'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t

Should fail...
ok
test_0wrapper_implementation_0421 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...odes': 's, t', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0422 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'s, t', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0423 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0424 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0425 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0426 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0427 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0428 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...modes': 's, t', 'output': 'tCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=tCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = tCl

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
ok
test_0wrapper_implementation_0429 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=tCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0430 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=tCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = tCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
ok
test_0wrapper_implementation_0431 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0432 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'s, t', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=tClpCllCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = tCl pCl lCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0433 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=tClpCllCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = tCl pCl lCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0434 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=tClpCllCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = tCl pCl lCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0435 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0436 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0437 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0438 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0439 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0440 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...s': 's, t', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=nClsCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0441 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=nClsCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0442 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=nClsCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0443 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0444 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=tClpCllClnClsCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = tCl pCl lCl nCl sCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0445 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = tCl pCl lCl nCl sCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0446 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = tCl pCl lCl nCl sCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0447 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0448 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...s, t', 'tensor method': 'exact'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact

Should fail...
ok
test_0wrapper_implementation_0449 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...hod': 'exact', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0450 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...exact', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0451 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0452 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0453 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0454 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0455 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0456 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...thod': 'exact', 'output': 'tCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=tCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = tCl

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
ok
test_0wrapper_implementation_0457 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=tCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0458 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=tCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = tCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
ok
test_0wrapper_implementation_0459 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0460 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...exact', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=tClpCllCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = tCl pCl lCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0461 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=tClpCllCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = tCl pCl lCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0462 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=tClpCllCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = tCl pCl lCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0463 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0464 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0465 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0466 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0467 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0468 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...': 'exact', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=nClsCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0469 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=nClsCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0470 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=nClsCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0471 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0472 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=tClpCllClnClsCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0473 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0474 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0475 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0476 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... t', 'tensor method': 'photons'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons

Should fail...
ok
test_0wrapper_implementation_0477 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...d': 'photons', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0478 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...otons', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0479 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0480 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0481 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0482 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0483 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0484 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...od': 'photons', 'output': 'tCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=tCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = tCl

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
ok
test_0wrapper_implementation_0485 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=tCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0486 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=tCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = tCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
ok
test_0wrapper_implementation_0487 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0488 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...otons', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=tClpCllCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = tCl pCl lCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0489 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=tClpCllCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = tCl pCl lCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0490 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=tClpCllCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = tCl pCl lCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0491 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0492 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0493 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0494 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0495 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0496 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... 'photons', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=nClsCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0497 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=nClsCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0498 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=nClsCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0499 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0500 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=tClpCllClnClsCl |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0501 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0502 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0503 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case ic=adnidcdi_c_ad_cdi=-0.5_modes=st_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
ic = ad,nid,cdi
c_ad_cdi = -0.5
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl ee
/Users/runburg/github/classy/python/test_class.py:483: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).
  fig = plt.figure()
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0504 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V |
---------------------------------
P_k_ini type = inflation_V

Should fail...
ok
test_0wrapper_implementation_0505 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0506 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0507 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0508 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0509 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0510 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0511 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0512 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=tCl |
---------------------------------
P_k_ini type = inflation_V
output = tCl

Should fail...
ok
test_0wrapper_implementation_0513 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0514 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0515 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0516 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_V
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0517 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0518 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0519 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0520 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0521 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0522 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0523 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0524 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=nClsCl |
---------------------------------
P_k_ini type = inflation_V
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0525 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0526 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0527 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0528 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', 'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_V
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0529 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0530 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0531 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0532 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', 'tensor method': 'exact'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact

Should fail...
ok
test_0wrapper_implementation_0533 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...hod': 'exact', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0534 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...exact', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0535 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0536 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0537 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0538 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0539 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0540 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...thod': 'exact', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=tCl |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = tCl

Should fail...
ok
test_0wrapper_implementation_0541 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0542 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0543 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0544 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...exact', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0545 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0546 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0547 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0548 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0549 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0550 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0551 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0552 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...': 'exact', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=nClsCl |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0553 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0554 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0555 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0556 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0557 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0558 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0559 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0560 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', 'tensor method': 'photons'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons

Should fail...
ok
test_0wrapper_implementation_0561 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...d': 'photons', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0562 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...otons', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0563 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0564 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0565 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0566 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0567 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0568 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...od': 'photons', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=tCl |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = tCl

Should fail...
ok
test_0wrapper_implementation_0569 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0570 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0571 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0572 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...otons', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0573 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0574 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0575 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0576 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0577 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0578 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0579 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0580 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... 'photons', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=nClsCl |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0581 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0582 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0583 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0584 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0585 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0586 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0587 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0588 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', 'modes': 't'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t |
---------------------------------
P_k_ini type = inflation_V
modes = t

Should fail...
ok
test_0wrapper_implementation_0589 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', 'modes': 't', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0590 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...': 't', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0591 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0592 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0593 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0594 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0595 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0596 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', 'modes': 't', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=tCl |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = tCl

Should fail...
ok
test_0wrapper_implementation_0597 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0598 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0599 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0600 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...': 't', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0601 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0602 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0603 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0604 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0605 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0606 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0607 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0608 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...odes': 't', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=nClsCl |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0609 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0610 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0611 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0612 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0613 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0614 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0615 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0616 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...: 't', 'tensor method': 'exact'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact

Should fail...
ok
test_0wrapper_implementation_0617 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...hod': 'exact', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0618 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...exact', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0619 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0620 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0621 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0622 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0623 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0624 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...thod': 'exact', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=tCl |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = tCl

Should fail...
ok
test_0wrapper_implementation_0625 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0626 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0627 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0628 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...exact', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0629 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0630 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0631 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0632 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0633 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0634 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0635 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0636 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...': 'exact', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=nClsCl |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0637 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0638 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0639 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0640 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0641 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0642 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0643 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0644 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'t', 'tensor method': 'photons'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons

Should fail...
ok
test_0wrapper_implementation_0645 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...d': 'photons', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0646 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...otons', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0647 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0648 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0649 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0650 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0651 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0652 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...od': 'photons', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=tCl |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = tCl

Should fail...
ok
test_0wrapper_implementation_0653 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0654 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0655 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0656 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...otons', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0657 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0658 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0659 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0660 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0661 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0662 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0663 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0664 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... 'photons', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=nClsCl |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0665 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0666 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0667 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0668 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0669 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0670 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0671 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=t_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0672 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', 'modes': 's, t'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st |
---------------------------------
P_k_ini type = inflation_V
modes = s, t

Should fail...
ok
test_0wrapper_implementation_0673 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...odes': 's, t', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0674 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'s, t', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0675 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0676 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0677 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0678 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0679 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0680 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...modes': 's, t', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=tCl |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = tCl

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0681 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0682 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = tCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0683 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0684 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'s, t', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = tCl pCl lCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0685 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = tCl pCl lCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0686 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = tCl pCl lCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0687 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0688 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0689 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0690 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0691 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0692 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...s': 's, t', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=nClsCl |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0693 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0694 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0695 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0696 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = tCl pCl lCl nCl sCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0697 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = tCl pCl lCl nCl sCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0698 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = tCl pCl lCl nCl sCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0699 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0700 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...s, t', 'tensor method': 'exact'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact

Should fail...
ok
test_0wrapper_implementation_0701 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...hod': 'exact', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0702 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...exact', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0703 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0704 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0705 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0706 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0707 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0708 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...thod': 'exact', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=tCl |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = tCl

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0709 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0710 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = tCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0711 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0712 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...exact', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = tCl pCl lCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0713 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = tCl pCl lCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0714 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = tCl pCl lCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0715 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0716 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0717 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0718 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0719 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0720 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...': 'exact', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=nClsCl |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0721 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0722 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0723 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0724 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0725 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0726 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0727 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0728 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... t', 'tensor method': 'photons'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons

Should fail...
ok
test_0wrapper_implementation_0729 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...d': 'photons', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0730 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...otons', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0731 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0732 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0733 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0734 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0735 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0736 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...od': 'photons', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=tCl |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = tCl

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0737 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0738 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = tCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0739 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0740 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...otons', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = tCl pCl lCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0741 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = tCl pCl lCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0742 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = tCl pCl lCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0743 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0744 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0745 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0746 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0747 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0748 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... 'photons', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=nClsCl |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0749 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0750 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0751 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0752 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0753 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0754 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0755 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_modes=st_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0756 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H |
---------------------------------
P_k_ini type = inflation_H

Should fail...
ok
test_0wrapper_implementation_0757 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0758 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0759 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0760 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_H
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0761 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0762 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0763 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0764 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=tCl |
---------------------------------
P_k_ini type = inflation_H
output = tCl

Should fail...
ok
test_0wrapper_implementation_0765 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0766 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0767 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0768 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_H
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0769 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0770 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0771 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0772 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_H
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0773 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0774 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0775 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0776 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=nClsCl |
---------------------------------
P_k_ini type = inflation_H
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0777 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0778 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0779 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0780 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', 'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_H
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0781 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0782 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0783 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0784 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', 'tensor method': 'exact'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact

Should fail...
ok
test_0wrapper_implementation_0785 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...hod': 'exact', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0786 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...exact', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0787 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0788 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0789 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0790 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0791 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0792 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...thod': 'exact', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=tCl |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = tCl

Should fail...
ok
test_0wrapper_implementation_0793 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0794 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0795 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0796 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...exact', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0797 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0798 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0799 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0800 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0801 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0802 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0803 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0804 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...': 'exact', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=nClsCl |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0805 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0806 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0807 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0808 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0809 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0810 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0811 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0812 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', 'tensor method': 'photons'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons

Should fail...
ok
test_0wrapper_implementation_0813 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...d': 'photons', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0814 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...otons', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0815 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0816 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0817 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0818 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0819 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0820 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...od': 'photons', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=tCl |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = tCl

Should fail...
ok
test_0wrapper_implementation_0821 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0822 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0823 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0824 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...otons', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0825 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0826 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0827 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0828 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0829 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0830 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0831 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0832 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... 'photons', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=nClsCl |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0833 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0834 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0835 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0836 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0837 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0838 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0839 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0840 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', 'modes': 't'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t |
---------------------------------
P_k_ini type = inflation_H
modes = t

Should fail...
ok
test_0wrapper_implementation_0841 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', 'modes': 't', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0842 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...': 't', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0843 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0844 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0845 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0846 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0847 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0848 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', 'modes': 't', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=tCl |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = tCl

Should fail...
ok
test_0wrapper_implementation_0849 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0850 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0851 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0852 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...': 't', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0853 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0854 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0855 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0856 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0857 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0858 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0859 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0860 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...odes': 't', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=nClsCl |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0861 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0862 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0863 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0864 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0865 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0866 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0867 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0868 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...: 't', 'tensor method': 'exact'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact

Should fail...
ok
test_0wrapper_implementation_0869 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...hod': 'exact', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0870 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...exact', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0871 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0872 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0873 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0874 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0875 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0876 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...thod': 'exact', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=tCl |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = tCl

Should fail...
ok
test_0wrapper_implementation_0877 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0878 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0879 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0880 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...exact', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0881 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0882 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0883 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0884 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0885 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0886 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0887 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0888 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...': 'exact', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=nClsCl |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0889 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0890 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0891 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0892 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0893 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0894 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0895 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0896 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'t', 'tensor method': 'photons'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons

Should fail...
ok
test_0wrapper_implementation_0897 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...d': 'photons', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0898 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...otons', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0899 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0900 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0901 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0902 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0903 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0904 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...od': 'photons', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=tCl |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = tCl

Should fail...
ok
test_0wrapper_implementation_0905 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0906 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0907 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0908 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...otons', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_0909 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0910 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0911 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0912 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0913 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0914 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0915 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0916 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... 'photons', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=nClsCl |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0917 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0918 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0919 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0920 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_0921 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0922 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0923 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=t_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0924 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', 'modes': 's, t'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st |
---------------------------------
P_k_ini type = inflation_H
modes = s, t

Should fail...
ok
test_0wrapper_implementation_0925 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...odes': 's, t', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0926 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'s, t', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0927 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0928 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0929 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0930 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0931 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0932 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...modes': 's, t', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=tCl |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = tCl

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0933 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0934 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = tCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0935 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0936 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'s, t', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = tCl pCl lCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0937 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = tCl pCl lCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0938 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = tCl pCl lCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0939 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0940 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0941 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0942 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0943 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0944 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...s': 's, t', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=nClsCl |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0945 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0946 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0947 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0948 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = tCl pCl lCl nCl sCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0949 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = tCl pCl lCl nCl sCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0950 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = tCl pCl lCl nCl sCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0951 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0952 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...s, t', 'tensor method': 'exact'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact

Should fail...
ok
test_0wrapper_implementation_0953 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...hod': 'exact', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0954 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...exact', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0955 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0956 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0957 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0958 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0959 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0960 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...thod': 'exact', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=tCl |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = tCl

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0961 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0962 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = tCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0963 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0964 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...exact', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = tCl pCl lCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0965 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = tCl pCl lCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0966 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = tCl pCl lCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0967 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0968 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0969 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0970 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0971 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0972 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...': 'exact', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=nClsCl |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_0973 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0974 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0975 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0976 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0977 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0978 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0979 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_0980 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... t', 'tensor method': 'photons'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons

Should fail...
ok
test_0wrapper_implementation_0981 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...d': 'photons', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0982 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...otons', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0983 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0984 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_0985 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0986 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_0987 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0988 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...od': 'photons', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=tCl |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = tCl

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0989 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0990 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = tCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
ok
test_0wrapper_implementation_0991 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_0992 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...otons', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = tCl pCl lCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0993 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = tCl pCl lCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0994 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = tCl pCl lCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
ok
test_0wrapper_implementation_0995 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
ok
test_0wrapper_implementation_0996 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0997 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0998 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_0999 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should not fail...
--> testing pk function
--> testing raw_cl for tt
--> testing raw_cl for pp


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of Pkok
test_0wrapper_implementation_1000 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... 'photons', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=nClsCl |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_1001 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1002 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1003 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1004 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_1005 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_1006 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_1007 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_H_modes=st_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_H
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should not fail...
--> testing raw_cl for tt
--> testing raw_cl for ee
--> testing raw_cl for bb
--> testing raw_cl for pp
--> testing absence of mPk


---------------------------------
| Comparing synch and Newt: |
---------------------------------
--> testing equality of raw_cl tt
--> testing equality of raw_cl ee
--> testing equality of raw_cl te
--> testing equality of raw_cl bb
--> testing equality of raw_cl pp
--> testing equality of raw_cl tp
--> testing equality of lensed_cl tt
--> testing equality of lensed_cl ee
--> testing equality of lensed_cl te
--> testing equality of lensed_cl bb
--> testing equality of lensed_cl pp
--> testing equality of lensed_cl tp
--> testing equality of density_cl dd
--> testing equality of density_cl ll
--> testing equality of density_cl dl
ERROR
test_0wrapper_implementation_1008 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_end'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end |
---------------------------------
P_k_ini type = inflation_V_end

Should fail...
ok
test_0wrapper_implementation_1009 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_end', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1010 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_end', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1011 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1012 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V_end
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_1013 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1014 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1015 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1016 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_end', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=tCl |
---------------------------------
P_k_ini type = inflation_V_end
output = tCl

Should fail...
ok
test_0wrapper_implementation_1017 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1018 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1019 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1020 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_end', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_V_end
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_1021 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1022 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1023 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1024 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V_end
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_1025 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1026 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1027 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1028 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_end', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=nClsCl |
---------------------------------
P_k_ini type = inflation_V_end
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_1029 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1030 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1031 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1032 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_V_end
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_1033 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1034 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1035 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1036 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_end', 'tensor method': 'exact'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact

Should fail...
ok
test_0wrapper_implementation_1037 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...hod': 'exact', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1038 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...exact', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1039 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1040 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_1041 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1042 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1043 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1044 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...thod': 'exact', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=tCl |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = tCl

Should fail...
ok
test_0wrapper_implementation_1045 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1046 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1047 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1048 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...exact', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_1049 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1050 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1051 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1052 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_1053 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1054 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1055 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1056 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...': 'exact', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=nClsCl |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_1057 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1058 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1059 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1060 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_1061 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1062 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1063 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1064 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_end', 'tensor method': 'photons'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons

Should fail...
ok
test_0wrapper_implementation_1065 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...d': 'photons', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1066 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...otons', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1067 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1068 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_1069 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1070 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1071 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1072 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...od': 'photons', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=tCl |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = tCl

Should fail...
ok
test_0wrapper_implementation_1073 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1074 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1075 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1076 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...otons', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_1077 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1078 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1079 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1080 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_1081 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1082 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1083 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1084 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... 'photons', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=nClsCl |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_1085 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1086 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1087 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1088 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_1089 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1090 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1091 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1092 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_end', 'modes': 't'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t |
---------------------------------
P_k_ini type = inflation_V_end
modes = t

Should fail...
ok
test_0wrapper_implementation_1093 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... 'modes': 't', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1094 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...': 't', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1095 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1096 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_1097 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1098 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1099 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1100 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en..., 'modes': 't', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=tCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = tCl

Should fail...
ok
test_0wrapper_implementation_1101 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1102 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1103 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1104 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...': 't', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_1105 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1106 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1107 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1108 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_1109 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1110 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1111 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1112 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...odes': 't', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=nClsCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_1113 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1114 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1115 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1116 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_1117 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1118 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1119 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1120 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...: 't', 'tensor method': 'exact'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact

Should fail...
ok
test_0wrapper_implementation_1121 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...hod': 'exact', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1122 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...exact', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1123 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1124 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_1125 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1126 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1127 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1128 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...thod': 'exact', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=tCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = tCl

Should fail...
ok
test_0wrapper_implementation_1129 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1130 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1131 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1132 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...exact', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_1133 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1134 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1135 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1136 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_1137 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1138 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1139 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1140 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...': 'exact', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=nClsCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_1141 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1142 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1143 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1144 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_1145 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1146 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1147 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1148 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'t', 'tensor method': 'photons'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons

Should fail...
ok
test_0wrapper_implementation_1149 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...d': 'photons', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1150 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...otons', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1151 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1152 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_1153 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1154 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1155 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1156 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...od': 'photons', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=tCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = tCl

Should fail...
ok
test_0wrapper_implementation_1157 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1158 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = tCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1159 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1160 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...otons', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = tCl pCl lCl

Should fail...
ok
test_0wrapper_implementation_1161 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = tCl pCl lCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1162 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = tCl pCl lCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1163 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1164 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_1165 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1166 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1167 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1168 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... 'photons', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=nClsCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_1169 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1170 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1171 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1172 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl

Should fail...
ok
test_0wrapper_implementation_1173 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1174 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1175 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=t_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1176 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_end', 'modes': 's, t'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t

Should fail...
ok
test_0wrapper_implementation_1177 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...odes': 's, t', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1178 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'s, t', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1179 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1180 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_1181 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1182 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1183 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1184 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...modes': 's, t', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=tCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = tCl

Should not fail...
ERROR
test_0wrapper_implementation_1185 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1186 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = tCl
non linear = halofit

Should not fail...
ERROR
test_0wrapper_implementation_1187 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1188 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'s, t', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = tCl pCl lCl

Should not fail...
ERROR
test_0wrapper_implementation_1189 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = tCl pCl lCl
lensing = yes

Should not fail...
ERROR
test_0wrapper_implementation_1190 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = tCl pCl lCl
non linear = halofit

Should not fail...
ERROR
test_0wrapper_implementation_1191 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should not fail...
ERROR
test_0wrapper_implementation_1192 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should not fail...
ERROR
test_0wrapper_implementation_1193 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should not fail...
ERROR
test_0wrapper_implementation_1194 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
ERROR
test_0wrapper_implementation_1195 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should not fail...
ERROR
test_0wrapper_implementation_1196 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...s': 's, t', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=nClsCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_1197 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1198 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1199 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1200 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = tCl pCl lCl nCl sCl

Should not fail...
ERROR
test_0wrapper_implementation_1201 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = tCl pCl lCl nCl sCl
lensing = yes

Should not fail...
ERROR
test_0wrapper_implementation_1202 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = tCl pCl lCl nCl sCl
non linear = halofit

Should not fail...
ERROR
test_0wrapper_implementation_1203 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should not fail...
ERROR
test_0wrapper_implementation_1204 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...s, t', 'tensor method': 'exact'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact

Should fail...
ok
test_0wrapper_implementation_1205 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...hod': 'exact', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1206 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...exact', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1207 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1208 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_1209 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1210 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1211 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1212 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...thod': 'exact', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=tCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = tCl

Should not fail...
ERROR
test_0wrapper_implementation_1213 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1214 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = tCl
non linear = halofit

Should not fail...
ERROR
test_0wrapper_implementation_1215 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1216 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...exact', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = tCl pCl lCl

Should not fail...
ERROR
test_0wrapper_implementation_1217 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = tCl pCl lCl
lensing = yes

Should not fail...
ERROR
test_0wrapper_implementation_1218 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = tCl pCl lCl
non linear = halofit

Should not fail...
ERROR
test_0wrapper_implementation_1219 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should not fail...
ERROR
test_0wrapper_implementation_1220 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should not fail...
ERROR
test_0wrapper_implementation_1221 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should not fail...
ERROR
test_0wrapper_implementation_1222 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
ERROR
test_0wrapper_implementation_1223 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should not fail...
ERROR
test_0wrapper_implementation_1224 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...': 'exact', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=nClsCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_1225 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1226 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1227 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1228 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl

Should not fail...
ERROR
test_0wrapper_implementation_1229 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl
lensing = yes

Should not fail...
ERROR
test_0wrapper_implementation_1230 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit

Should not fail...
ERROR
test_0wrapper_implementation_1231 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=exact_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = exact
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should not fail...
ERROR
test_0wrapper_implementation_1232 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... t', 'tensor method': 'photons'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons

Should fail...
ok
test_0wrapper_implementation_1233 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...d': 'photons', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1234 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...otons', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1235 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1236 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ut': 'mPk', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10

Should fail...
ok
test_0wrapper_implementation_1237 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1238 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1239 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=mPk_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = mPk
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1240 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...od': 'photons', 'output': 'tCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=tCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = tCl

Should not fail...
ERROR
test_0wrapper_implementation_1241 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...utput': 'tCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=tCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = tCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1242 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... 'tCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=tCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = tCl
non linear = halofit

Should not fail...
ERROR
test_0wrapper_implementation_1243 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=tCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = tCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1244 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...otons', 'output': 'tCl pCl lCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=tClpCllCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = tCl pCl lCl

Should not fail...
ERROR
test_0wrapper_implementation_1245 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'tCl pCl lCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=tClpCllCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = tCl pCl lCl
lensing = yes

Should not fail...
ERROR
test_0wrapper_implementation_1246 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l lCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=tClpCllCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = tCl pCl lCl
non linear = halofit

Should not fail...
ERROR
test_0wrapper_implementation_1247 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=tClpCllCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = tCl pCl lCl
non linear = halofit
lensing = yes

Should not fail...
ERROR
test_0wrapper_implementation_1248 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...k tCl lCl', 'P_k_max_1/Mpc': 10}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10 |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10

Should not fail...
ERROR
test_0wrapper_implementation_1249 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
lensing = yes

Should not fail...
ERROR
test_0wrapper_implementation_1250 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit

Should not fail...
ERROR
test_0wrapper_implementation_1251 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=mPktCllCl_P_k_max_1%Mpc=10_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = mPk tCl lCl
P_k_max_1/Mpc = 10
non linear = halofit
lensing = yes

Should not fail...
ERROR
test_0wrapper_implementation_1252 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... 'photons', 'output': 'nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=nClsCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = nCl sCl

Should fail...
ok
test_0wrapper_implementation_1253 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...t': 'nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=nClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = nCl sCl
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1254 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=nClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = nCl sCl
non linear = halofit

Should fail...
ok
test_0wrapper_implementation_1255 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=nClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = nCl sCl
non linear = halofit
lensing = yes

Should fail...
ok
test_0wrapper_implementation_1256 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'output': 'tCl pCl lCl nCl sCl'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=tClpCllClnClsCl |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl

Should not fail...
ERROR
test_0wrapper_implementation_1257 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... lCl nCl sCl', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=tClpCllClnClsCl_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl
lensing = yes

Should not fail...
ERROR
test_0wrapper_implementation_1258 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit

Should not fail...
ERROR
test_0wrapper_implementation_1259 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}] ... 

---------------------------------
| Test case P_k_initype=inflation_V_end_modes=st_tensormethod=photons_output=tClpCllClnClsCl_nonlinear=halofit_lensing=yes |
---------------------------------
P_k_ini type = inflation_V_end
modes = s, t
tensor method = photons
output = tCl pCl lCl nCl sCl
non linear = halofit
lensing = yes

Should not fail...
ERROR
test_incompatible_input (test_class.TestClass) ... ok

======================================================================
ERROR: test_0wrapper_implementation_0020 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0022 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'nCl sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0024 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'tCl pCl lCl nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0025 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'tCl pCl lCl nCl sCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0026 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'tCl pCl lCl nCl sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0027 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'output': 'tCl pCl lCl nCl sCl'...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0192 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'tCl pCl lCl nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0193 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'tCl... lCl nCl sCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0194 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'tCl...l sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0195 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'output': 'tCl...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0220 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...'output': 'tCl pCl lCl nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0221 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method... lCl nCl sCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0222 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...l sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0223 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0248 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...'output': 'tCl pCl lCl nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0249 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method... lCl nCl sCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0250 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...l sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0251 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'modes': 's, t', 'tensor method...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0272 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi': -0.5, 'output': 'nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0274 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0276 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'output': 'tCl pCl lCl nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0277 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... lCl nCl sCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0278 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0279 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0444 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'output': 'tCl pCl lCl nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0445 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... lCl nCl sCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0446 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0447 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0472 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'output': 'tCl pCl lCl nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0473 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... lCl nCl sCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0474 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0475 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0500 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...'output': 'tCl pCl lCl nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0501 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':... lCl nCl sCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0502 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...l sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0503 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'ic': 'ad,nid,cdi', 'c_ad_cdi':...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0696 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'output': 'tCl pCl lCl nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0697 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... lCl nCl sCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0698 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0699 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0724 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'output': 'tCl pCl lCl nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0725 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... lCl nCl sCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0726 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0727 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0752 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...'output': 'tCl pCl lCl nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0753 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ... lCl nCl sCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0754 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...l sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0755 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V', ...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0948 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'output': 'tCl pCl lCl nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0949 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... lCl nCl sCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0950 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0951 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0976 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'output': 'tCl pCl lCl nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0977 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... lCl nCl sCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0978 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_0979 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_1004 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...'output': 'tCl pCl lCl nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_1005 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ... lCl nCl sCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_1006 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...l sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_1007 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_H', ...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 335, in test_0wrapper_implementation
    self.compare_output(self.cosmo, self.cosmo_newt)
  File "/Users/runburg/github/classy/python/test_class.py", line 455, in compare_output
    np.abs(value).max(), np.abs(to_test[key]).max())
TypeError: bad operand type for abs(): 'dict'

======================================================================
ERROR: test_0wrapper_implementation_1184 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...modes': 's, t', 'output': 'tCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1186 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... 'tCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1188 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'s, t', 'output': 'tCl pCl lCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1189 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'tCl pCl lCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1190 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l lCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1191 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1192 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...k tCl lCl', 'P_k_max_1/Mpc': 10}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1193 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1194 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1195 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1200 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'output': 'tCl pCl lCl nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1201 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... lCl nCl sCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1202 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1203 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1212 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...thod': 'exact', 'output': 'tCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1214 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... 'tCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1216 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...exact', 'output': 'tCl pCl lCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1217 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'tCl pCl lCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1218 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l lCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1219 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1220 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...k tCl lCl', 'P_k_max_1/Mpc': 10}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1221 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1222 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1223 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1228 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'output': 'tCl pCl lCl nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1229 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... lCl nCl sCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1230 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1231 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1240 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...od': 'photons', 'output': 'tCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1242 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... 'tCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1244 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...otons', 'output': 'tCl pCl lCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1245 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'tCl pCl lCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1246 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l lCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1247 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1248 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...k tCl lCl', 'P_k_max_1/Mpc': 10}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1249 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...ax_1/Mpc': 10, 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1250 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...c': 10, 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1251 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1256 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...'output': 'tCl pCl lCl nCl sCl'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1257 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en... lCl nCl sCl', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1258 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...l sCl', 'non linear': 'halofit'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

======================================================================
ERROR: test_0wrapper_implementation_1259 (test_class.TestClass)
Create a few instances based on different cosmologies [with inputdict={'P_k_ini type': 'inflation_V_en...r': 'halofit', 'lensing': 'yes'}]
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/parameterized/parameterized.py", line 518, in standalone_func
    return func(*(a + p.args), **p.kwargs)
  File "/Users/runburg/github/classy/python/test_class.py", line 286, in test_0wrapper_implementation
    self.cosmo.compute()
  File "classy.pyx", line 358, in classy.Class.compute
    raise CosmoComputationError(self.pm.error_message)
classy.CosmoComputationError: 

Error in Class: primordial_init(L:365) :error in primordial_inflation_solve_inflation(ppt,ppm,ppr);
=>primordial_inflation_solve_inflation(L:1159) :error in primordial_inflation_find_phi_pivot(ppm,ppr,y,dy);
=>primordial_inflation_find_phi_pivot(L:2896) :error in primordial_inflation_evolve_background(ppm, ppr, y, dy, _a_, 1./exp(target+ppr->primordial_inflation_extra_efolds)*a_ratio_after_small_epsilon, 1, backward, conformal);
=>primordial_inflation_evolve_background(L:2223) :error in generic_integrator(primordial_inflation_derivs, tau_start, tau_end, y, &pipaw, ppr->primordial_inflation_tol_integration, ppr->smallest_allowed_variation, &gi);
=>generic_integrator(L:103) :error in rkqs(&x, h, eps, &hdid, &hnext, derivs, parameters_and_workspace_for_derivs, pgi);
=>rkqs(L:154) :condition (xnew == *x) is true; stepsize underflow at x=-2.132725e+161

----------------------------------------------------------------------
Ran 1261 tests in 892.095s

FAILED (errors=102)
